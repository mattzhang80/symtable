Assignment 3 readme File

------------------------------------------------------------------------
What is your name?
Matthew Zhang


------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. 
Such documents include the course's lecture slides and precept handouts.

The course's textbooks.

The course's current staff members outside of class time through Ed.
------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.
None

None
------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?
This was helpful in learning how to use hash tables and linked lists to 
develop a Symbol Table ADT. It was fun to see how the hash table and 
linked list implementations compared in terms of speed and memory usage.
Overall, this assignment was a good learning experience.
------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?
No known bugs. Passes all tests.
------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

"None."
------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablehash.c: line 178: medium priority:  
Do you want to validate 'pvValue' through an assert?

symtablehash.c: line 223: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablehash.c: line 354: medium priority:
Do you want to validate 'pvExtra' through an assert?

I disagree with these warnings because when I validate 'pvValue' and
'pvExtra' through an assert in their respective functions, the program
does not run correctly. I believe this is because the functions are 
intended to allow NULL values for 'pvValue' and 'pvExtra' in the 
respective functions, SymTable_put, SymTable_replace, SymTable_map. 
This makes sense because the functions are intended to be used for
inserting, replacing, and mapping values to keys, which may not have
values or extras.

Finally, according to edStem, 
https://edstem.org/us/courses/41929/discussion/3669239, the 
implementation never dereferences pvValue. 
Also, according to edStem,
https://edstem.org/us/courses/41929/discussion/3664080, the pvExtra
can be NULL based on examples of how it is supposed to be used in the 
testsymtable.c test file.


------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

"None."
------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 86: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablelist.c: line 128: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablelist.c: line 232: medium priority:
Do you want to validate 'pvExtra' through an assert?


I disagree with these warnings because when I validate 'pvValue' and
'pvExtra' through an assert in their respective functions, the program
does not run correctly. I believe this is because the functions are 
intended to allow NULL values for 'pvValue' and 'pvExtra' in the 
respective functions, SymTable_put, SymTable_replace, SymTable_map. 
This makes sense because the functions are intended to be used for
inserting, replacing, and mapping values to keys, which may not have
values or extras.

Finally, according to edStem, 
https://edstem.org/us/courses/41929/discussion/3669239, the 
implementation never dereferences pvValue. 
Also, according to edStem,
https://edstem.org/us/courses/41929/discussion/3664080, the pvExtra
can be NULL based on examples of how it is supposed to be used in the 
testsymtable.c test file.
------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.008868 seconds.
-- 5000 bindings consumed 1.079067 seconds.
-- 50000 bindings consumed 108.502965 seconds.
-- 500000 bindings consumed More than 5 Minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.007931 seconds.
-- 50000 bindings consumed 0.424163 seconds.
-- 500000 bindings consumed 85.828796 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.008826 seconds.
-- 50000 bindings consumed 0.144087 seconds.
-- 500000 bindings consumed 1.814468 seconds.
